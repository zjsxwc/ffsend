image: "rust:slim"

stages:
  - check
  - build
  - test
  - release

variables:
  RUST_VERSION: stable

# Cargo artifacts caching per Rust version and pipeline
cache:
  key: "$RUST_VERSION"
  paths:
    - /usr/local/rustup/
    - /usr/local/cargo/
    - target/

# Install compiler and OpenSSL dependencies
before_script:
  - apt-get update
  - apt-get install -y --no-install-recommends build-essential pkg-config libssl-dev
  - |
    rustup install $RUST_VERSION
    rustup default $RUST_VERSION
  - |
    rustc --version
    cargo --version

# Variable defaults
variables:
  RUST_VERSION: stable

# Check on stable, beta and nightly 
.check-base: &check-base
  stage: check
  script:
    - cargo check --verbose
    - cargo check --no-default-features --verbose
    - cargo check --features no-color --verbose
rust-stable:
  <<: *check-base
rust-beta:
  <<: *check-base
  variables:
    RUST_VERSION: beta
  cache: {}
rust-nightly:
  <<: *check-base
  variables:
    RUST_VERSION: nightly
  cache: {}

# Build using Rust stable
build:
  stage: build
  script:
    - cargo build --release --verbose
    - mv target/release/ffsend ./ffsend
  artifacts:
    name: build-dynamic
    paths:
      - ffsend
    expire_in: 1 month

# Build a static version
build-static:
  stage: build
  script:
    # Install the static target
    - rustup target add x86_64-unknown-linux-musl

    # Build OpenSSL statically
    - apt install -y build-essential wget musl-tools
    - wget https://www.openssl.org/source/openssl-1.0.2o.tar.gz
    - tar xzvf openssl-1.0.2o.tar.gz
    - cd openssl-1.0.2o
    - ./config -fPIC --openssldir=/usr/local/ssl --prefix=/usr/local
    - make
    - make install
    - cd ..

    # Statically build ffsend
    - export OPENSSL_STATIC=1
    - export OPENSSL_LIB_DIR=/usr/local/lib
    - export OPENSSL_INCLUDE_DIR=/usr/local/include
    - cargo build --target=x86_64-unknown-linux-musl --release --verbose

    # Prepare the release artifact
    - find . -name ffsend -exec ls -lah {} \;
    - mv target/x86_64-unknown-linux-musl/release/ffsend ./ffsend
  artifacts:
    name: build-static
    paths:
      - ffsend
    expire_in: 1 month

# Run the unit tests through Cargo
cargo-test:
  stage: test
  dependencies: []
  script:
    - cargo test --verbose

# Run integration test with the public Send service
public-send-test:
  stage: test
  dependencies:
    - build-static
  variables:
    GIT_STRATEGY: none
  cache: {}
  before_script: []
  script:
    - head -c1m </dev/urandom >testfile
    - ./ffsend upload testfile -n testfile.bin -a -d 10 -p secret -I
    # TODO: download this file, compare checksums

# TODO: only build releases when running CI for version tags

# Cargo crate release
crate:
  stage: release
  variables:
    TARGET: x86_64-unknown-linux-gnu
  script:
    - echo "Creating release crate on crates.io..."
    - echo $CARGO_TOKEN | cargo login
    # TODO: enable after the test succeeds
    # - cargo publish --verbose

# GitHub binary release for Linux on x86/x86_64
linux-x64:
  stage: release
  variables:
    TARGET: x86_64-unknown-linux-gnu
    TARGET_SIMPLE: linux-x64
    DEB: y
  before_script: &release-before-script
    - apt-get update
    - apt-get install -y --no-install-recommends build-essential pkg-config libssl-dev apt-transport-https ca-certificates curl gnupg2 software-properties-common

    - curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -
    - add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    - apt-get update
    - apt-get install -y --no-install-recommends docker-ce
    - docker info

    - rustc --version && cargo --version
  script: &release-script
    - echo Install release dependencies
    - |
      if [ ! $TARGET == "x86_64-unknown-linux-gnu" ]; then
        cargo install cross
      fi
    - |
      if [ -n "$DEB" ]; then
        cargo install cargo-deb
      fi
    - echo Build release
    - |
      if [ $TARGET == "x86_64-unknown-linux-gnu" ]; then
        echo "Creating release binary on GitHub for $TARGET..."
        cargo build --release --verbose --all
        cp target/release/ffsend ./ffsend
      else
        echo "Creating release binary on GitHub for $TARGET (cross compiled)..."
        cross build --target $TARGET --release --verbose --all
        cp target/$TARGET/release/ffsend ./ffsend
      fi
    - tar -czvf ./ffsend-$CI_COMMIT_TAG-$TARGET_SIMPLE.tar.gz ffsend
    - |
      if [ -n "$DEB" ]; then
        cargo deb --verbose
      fi
    - mv ./ffsend ./ffsend-$CI_COMMIT_TAG-$TARGET_SIMPLE
  # TODO: this is in Travis CI style, convert this to GitLab CI
  # deploy: &deploy-github-release
  #   provider: releases
  #   api_key: $GITHUB_OAUTH_TOKEN
  #   skip_cleanup: true
  #   overwrite: true
  #   file_glob: true
  #   file:
  #     - target/debian/ffsend_*.deb
  #     - ffsend-$CI_COMMIT_TAG-$TARGET_SIMPLE.tar.gz
  #     - ffsend-$CI_COMMIT_TAG-$TARGET_SIMPLE
  #   on:
  #     tags: true
  #     branch: master

linux-i368:
  stage: release
  variables:
    TARGET: i686-unknown-linux-gnu
    TARGET_SIMPLE: linux-i386
    DEB: y
  before_script: *release-before-script
  script: *release-script
  # deploy: *deploy-github-release

# GitHub binary release for Linux on arch
linux-aarch64:
  stage: release
  variables:
    TARGET: aarch64-unknown-linux-gnu
    TARGET_SIMPLE: linux-aarch64
  before_script: *release-before-script
  script: *release-script
  # deploy: *deploy-github-release

linux-arm:
  stage: release
  variables:
    TARGET: arm-unknown-linux-gnueabi
    TARGET_SIMPLE: linux-arm
  before_script: *release-before-script
  script: *release-script
  # deploy: *deploy-github-release

linux-armv7:
  stage: release
  variables:
    TARGET: armv7-unknown-linux-gnueabihf
    TARGET_SIMPLE: linux-armv7
  before_script: *release-before-script
  script: *release-script
  # deploy: *deploy-github-release

# GitHub binary release for macOX
osx-x64:
  stage: release
  variables:
    TARGET: x86_64-apple-darwin
    TARGET_SIMPLE: osx-x64
  before_script: *release-before-script
  script: *release-script
  # deploy: *deploy-github-release
